{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { Linking, StyleSheet, Text } from 'react-native';\nimport { arrayOf, object, oneOfType, string } from 'prop-types';\nconst defaultStyle = StyleSheet.create({\n  root: {\n    flexWrap: 'wrap'\n  }\n});\nexport default class HyperlinkText extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      output: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.value) {\n      if (this.props.hyperlinks.length) {\n        this.setState({\n          output: this.composeHyperlinkProvidedText(this.props.value, this.props.hyperlinks, this.props.linkStyle, this.props.openLink)\n        });\n      } else {\n        this.setState({\n          output: this.composeHyperlinkedText(this.props.value, this.props.linkStyle, this.props.openLink)\n        });\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.value !== nextProps.value || this.props.baseStyle !== nextProps.baseStyle || this.props.linkStyle !== nextProps.linkStyle || this.props.hyperlinks !== nextProps.hyperlinks) {\n      if (nextProps.hyperlinks.length) {\n        this.setState({\n          output: this.composeHyperlinkProvidedText(nextProps.value, nextProps.hyperlinks, nextProps.linkStyle, nextProps.openLink)\n        });\n      } else {\n        this.setState({\n          output: this.composeHyperlinkedText(nextProps.value, nextProps.linkStyle, nextProps.openLink)\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      baseStyle\n    } = this.props;\n    const {\n      output\n    } = this.state;\n    return React.createElement(Text, {\n      style: [defaultStyle.root, baseStyle]\n    }, output);\n  }\n\n  composeHyperlinkedText(string, linkStyle = {}, openLink) {\n    if (typeof string !== 'string') return null;\n    const regex = /(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi;\n    const linkExists = regex.test(string);\n\n    if (linkExists) {\n      // Reset the regex index because sometimes it starts off at a weird sequence.. \n      regex.lastIndex = 0;\n      const startIndices = this.getStartIndices(regex, string);\n      const endIndices = this.getEndIndices(string, startIndices);\n\n      if (startIndices.length === endIndices.length) {\n        const result = [];\n        let noLinkString = string.substring(0, startIndices[0] !== undefined ? startIndices[0] : string.length);\n        result.push(React.createElement(Text, {\n          key: noLinkString\n        }, noLinkString));\n\n        for (let i = 0; i < startIndices.length; i += 1) {\n          const linkString = string.substring(startIndices[i], endIndices[i]);\n          result.push(React.createElement(Text, {\n            key: linkString,\n            style: linkStyle,\n            onPress: openLink ? () => openLink(linkString) : () => Linking.openURL(linkString)\n          }, linkString));\n          noLinkString = string.substring(endIndices[i], startIndices[i + 1] || string.length);\n\n          if (noLinkString) {\n            result.push(React.createElement(Text, {\n              key: noLinkString\n            }, noLinkString));\n          }\n        }\n\n        return result;\n      }\n    }\n\n    return React.createElement(Text, null, string);\n  }\n\n  getStartIndices(regex, text) {\n    const result = [];\n    let match;\n\n    do {\n      match = regex.exec(text);\n      if (match) result.push(match.index);\n    } while (match);\n\n    return result;\n  }\n\n  getEndIndices(text, startIndices) {\n    const endIndices = [];\n\n    for (let i = 0; i < startIndices.length; i += 1) {\n      let j = startIndices[i] + 1;\n\n      while (text[j] !== ' ' && text[j] !== undefined) {\n        j += 1;\n      }\n\n      endIndices.push(j);\n    }\n\n    return endIndices;\n  }\n\n  composeHyperlinkProvidedText(string, hyperlinks = [], linkStyle = {}, openLink) {\n    if (typeof string !== 'string') return null;\n    const format = [];\n    const startIndices = [];\n    const endIndices = [];\n    const keys = [];\n\n    for (let i = 0; i < hyperlinks.length; i += 1) {\n      const key = Object.keys(hyperlinks[i])[0];\n      const regex = new RegExp(key, \"g\");\n      const len = key.length;\n      let match;\n      regex.lastIndex = 0;\n\n      do {\n        match = regex.exec(string);\n\n        if (match) {\n          format.push(hyperlinks[i]);\n          startIndices.push(match.index);\n          endIndices.push(match.index + len);\n          keys.push(key);\n        }\n      } while (match);\n    }\n\n    const result = [];\n    let noLinkString = string.substring(0, startIndices[0] !== undefined ? startIndices[0] : string.length);\n    result.push(React.createElement(Text, {\n      key: noLinkString\n    }, noLinkString));\n\n    for (let i = 0; i < startIndices.length; i += 1) {\n      const linkKey = keys[i];\n      const hyperlink = format[i][keys[i]];\n      result.push(React.createElement(Text, {\n        key: hyperlink,\n        style: linkStyle,\n        onPress: openLink ? () => openLink(hyperlink) : () => Linking.openURL(hyperlink)\n      }, linkKey));\n      noLinkString = string.substring(endIndices[i], startIndices[i + 1] || string.length);\n\n      if (noLinkString) {\n        result.push(React.createElement(Text, {\n          key: noLinkString\n        }, noLinkString));\n      }\n    }\n\n    return result;\n  }\n\n}\nHyperlinkText.propTypes = {\n  value: string,\n  baseStyle: oneOfType(object, arrayOf(object)),\n  linkStyle: oneOfType(object, arrayOf(object)),\n  hyperlinks: arrayOf(object)\n};\nHyperlinkText.defaultProps = {\n  value: '',\n  baseStyle: {},\n  linkStyle: {},\n  hyperlinks: []\n};","map":{"version":3,"sources":["/Users/dummy/www/final/node_modules/react-native-hyperlink-text/dist/index.js"],"names":["React","PureComponent","Linking","StyleSheet","Text","arrayOf","object","oneOfType","string","defaultStyle","create","root","flexWrap","HyperlinkText","constructor","props","state","output","componentDidMount","value","hyperlinks","length","setState","composeHyperlinkProvidedText","linkStyle","openLink","composeHyperlinkedText","componentWillReceiveProps","nextProps","baseStyle","render","createElement","style","regex","linkExists","test","lastIndex","startIndices","getStartIndices","endIndices","getEndIndices","result","noLinkString","substring","undefined","push","key","i","linkString","onPress","openURL","text","match","exec","index","j","format","keys","Object","RegExp","len","linkKey","hyperlink","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Linking, StyleSheet, Text } from 'react-native';\nimport { arrayOf, object, oneOfType, string } from 'prop-types';\n\nconst defaultStyle = StyleSheet.create({\n  root: {\n    flexWrap: 'wrap'\n  }\n});\n\nexport default class HyperlinkText extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      output: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.value) {\n      if (this.props.hyperlinks.length) {\n        this.setState({ output: this.composeHyperlinkProvidedText(this.props.value, this.props.hyperlinks, this.props.linkStyle, this.props.openLink) });\n      } else {\n        this.setState({ output: this.composeHyperlinkedText(this.props.value, this.props.linkStyle, this.props.openLink) });\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.value !== nextProps.value || this.props.baseStyle !== nextProps.baseStyle || this.props.linkStyle !== nextProps.linkStyle || this.props.hyperlinks !== nextProps.hyperlinks) {\n      if (nextProps.hyperlinks.length) {\n        this.setState({ output: this.composeHyperlinkProvidedText(nextProps.value, nextProps.hyperlinks, nextProps.linkStyle, nextProps.openLink) });\n      } else {\n        this.setState({ output: this.composeHyperlinkedText(nextProps.value, nextProps.linkStyle, nextProps.openLink) });\n      }\n    }\n  }\n\n  render() {\n    const { baseStyle } = this.props;\n    const { output } = this.state;\n    return React.createElement(\n      Text,\n      { style: [defaultStyle.root, baseStyle] },\n      output\n    );\n  }\n\n  composeHyperlinkedText(string, linkStyle = {}, openLink) {\n    if (typeof string !== 'string') return null;\n    const regex = /(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi;\n    const linkExists = regex.test(string);\n    if (linkExists) {\n      // Reset the regex index because sometimes it starts off at a weird sequence.. \n      regex.lastIndex = 0;\n      const startIndices = this.getStartIndices(regex, string);\n      const endIndices = this.getEndIndices(string, startIndices);\n      if (startIndices.length === endIndices.length) {\n        const result = [];\n        let noLinkString = string.substring(0, startIndices[0] !== undefined ? startIndices[0] : string.length);\n        result.push(React.createElement(\n          Text,\n          { key: noLinkString },\n          noLinkString\n        ));\n        for (let i = 0; i < startIndices.length; i += 1) {\n          const linkString = string.substring(startIndices[i], endIndices[i]);\n          result.push(React.createElement(\n            Text,\n            {\n              key: linkString,\n              style: linkStyle,\n              onPress: openLink ? () => openLink(linkString) : () => Linking.openURL(linkString)\n            },\n            linkString\n          ));\n          noLinkString = string.substring(endIndices[i], startIndices[i + 1] || string.length);\n          if (noLinkString) {\n            result.push(React.createElement(\n              Text,\n              { key: noLinkString },\n              noLinkString\n            ));\n          }\n        }\n        return result;\n      }\n    }\n    return React.createElement(\n      Text,\n      null,\n      string\n    );\n  }\n\n  getStartIndices(regex, text) {\n    const result = [];\n    let match;\n    do {\n      match = regex.exec(text);\n      if (match) result.push(match.index);\n    } while (match);\n    return result;\n  }\n\n  getEndIndices(text, startIndices) {\n    const endIndices = [];\n    for (let i = 0; i < startIndices.length; i += 1) {\n      let j = startIndices[i] + 1;\n      while (text[j] !== ' ' && text[j] !== undefined) {\n        j += 1;\n      }\n      endIndices.push(j);\n    }\n    return endIndices;\n  }\n\n  composeHyperlinkProvidedText(string, hyperlinks = [], linkStyle = {}, openLink) {\n    if (typeof string !== 'string') return null;\n    const format = [];\n    const startIndices = [];\n    const endIndices = [];\n    const keys = [];\n    for (let i = 0; i < hyperlinks.length; i += 1) {\n      const key = Object.keys(hyperlinks[i])[0];\n      const regex = new RegExp(key, \"g\");\n      const len = key.length;\n      let match;\n      regex.lastIndex = 0;\n      do {\n        match = regex.exec(string);\n        if (match) {\n          format.push(hyperlinks[i]);\n          startIndices.push(match.index);\n          endIndices.push(match.index + len);\n          keys.push(key);\n        }\n      } while (match);\n    }\n    const result = [];\n    let noLinkString = string.substring(0, startIndices[0] !== undefined ? startIndices[0] : string.length);\n    result.push(React.createElement(\n      Text,\n      { key: noLinkString },\n      noLinkString\n    ));\n    for (let i = 0; i < startIndices.length; i += 1) {\n      const linkKey = keys[i];\n      const hyperlink = format[i][keys[i]];\n      result.push(React.createElement(\n        Text,\n        {\n          key: hyperlink,\n          style: linkStyle,\n          onPress: openLink ? () => openLink(hyperlink) : () => Linking.openURL(hyperlink)\n        },\n        linkKey\n      ));\n      noLinkString = string.substring(endIndices[i], startIndices[i + 1] || string.length);\n      if (noLinkString) {\n        result.push(React.createElement(\n          Text,\n          { key: noLinkString },\n          noLinkString\n        ));\n      }\n    }\n    return result;\n  }\n\n}\nHyperlinkText.propTypes = {\n  value: string,\n  baseStyle: oneOfType(object, arrayOf(object)),\n  linkStyle: oneOfType(object, arrayOf(object)),\n  hyperlinks: arrayOf(object)\n};\nHyperlinkText.defaultProps = {\n  value: '',\n  baseStyle: {},\n  linkStyle: {},\n  hyperlinks: []\n};"]},"metadata":{},"sourceType":"module"}